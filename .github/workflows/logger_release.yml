# Workflow to build and deploy designer dashboard to server.
name: OGD Logger - Release Script
run-name: ${{ format('{0} - {1}', github.workflow, github.event_name == 'release' && github.ref || 'Manual Run') }}
on:
  release:
    types: released
  workflow_dispatch: # Allow manual trigger of this workflow from the Actions tab

env:
  DEPLOY_HOST: ${{ vars.OGD_LOGGER_HOST }}
  DEPLOY_DIR:  ${{ vars.WEB_PATH }}/logger
  DEPLOY_URL:  ${{ vars.OGD_LOGGER_HOST }}/logger
  URL_PATH:    logger

jobs:
  release_deploy:
    name: Release Deploy of OGD Event Logger
    runs-on: ubuntu-22.04
    concurrency:
      group: ${{ github.repository }}-${{ github.ref }}-${{ github.workflow }}
      cancel-in-progress: true

    steps:

  # 1. Local checkout & config
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Set up Config File
      uses: ./.github/actions/logger_config
      with:
        db_user: ${{ secrets.OGD_LOGGING_USER }}
        db_pass: ${{ secrets.OGD_LOGGING_PASS }}
        monitor_enabled: true
        monitor_url: ${{ vars.OGD_MONITOR_HOST }}
        monitor_timeout: 100

  # 2. Build 

  # 3. Remote config & deploy
    - name: Get OpenConnect installed
      run: sudo apt-get -q update && sudo apt-get -q install openconnect
    - name: Connect VPN
      run: echo ${{ secrets.VPN_PASS }} | sudo openconnect --protocol=gp -u ${{ secrets.VPN_USER }} --passwd-on-stdin soe.vpn.wisc.edu &

    - name: Setup Access Key
      run: |
        mkdir -p ~/.ssh
        echo '${{secrets.DEPLOY_KEY}}' >> ./key.txt
        chmod 600 ./key.txt

    - name: Ensure directory exists
      run: ssh -o StrictHostKeyChecking=no -T -i ./key.txt ${{ secrets.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "mkdir -p ${{ env.DEPLOY_DIR }}"

    - name: Upload to web server via rsync
      uses: burnett01/rsync-deployments@7.0.1
      with:
        # switches:
        # -v : verbose output
        # -r : recurse into subdirectories
        # -c : use checksum to determine what files to update/skip
        # -t : preserve modification times
        # --delete : delete extraneous files from destination directories
        # --exclude-from : skip any files in rsync-exclude
        # --chmod : For each directory (D) and file (F), give user (u) and group (g) rwx permissions.
        #           Give others (o) only read permissions, plus execute for directories.
        switches: -vrct --delete --exclude-from 'rsync-exclude' --chmod=Du=rwx,Dg=rwx,Do=rx,Fu=rwx,Fg=rwx,Fo=r
        path: ./src/*
        remote_path: ${{ env.DEPLOY_DIR }}
        remote_host: ${{ env.DEPLOY_HOST }}
        remote_user: ${{ secrets.DEPLOY_USER }}
        remote_key:  ${{ secrets.DEPLOY_KEY  }}

  # 4. Cleanup & complete
    - name: Announce deploy
      run: echo "Deployed to ${{ env.DEPLOY_URL }}"
    - name: Upload logs as artifacts
      uses: actions/upload-artifact@v4
      with:
        path: ./*.log
